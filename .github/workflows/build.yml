name: "Reusable Workflow to Build Mythfrontednd"

on:
  workflow_call:
    inputs:
      MYTHBRANCH:
        required: true
        type: string
        default: master
      VERSNUM:
        required: true
        type: string
        default: 33

jobs:
  build_mythtv:
    strategy:
      matrix:
        os: ['macos-10.15', 'macos-11', 'macos-12']
        arch: ['X86']
      fail-fast: false
    runs-on: ${{ matrix.os }}
    env:
      PYVERS: "310"
      PYDOTVERS: "3.10"
      DBVERS: "mysql8"
    steps:
    - uses: actions/checkout@master
    # Make sure the @v0.4.1 matches the current version of the
    # action
    - uses: webfactory/ssh-agent@v0.7.0
      with:
        ssh-private-key: ${{ secrets.SF_PRIV_KEY }}
    - name: "Unpack input variables"
      run: |
        echo "MYTHBRANCH=${{ inputs.MYTHBRANCH }}" >> $GITHUB_ENV
        echo "VERSNUM=${{ inputs.VERSNUM }}" >> $GITHUB_ENV
    - name: "Setup environemental variables"
      run: |
        echo "BLD_FLGS=--skip-ansible=true --repo-prefix=${GITHUB_WORKSPACE} --version=${MYTHBRANCH} --python-version=${PYVERS} --database-version=${DBVERS}" >> $GITHUB_ENV
        echo "PKGARCH=$(/usr/bin/uname -m)" >> $GITHUB_ENV
        echo "OS_VERS=$(/usr/bin/sw_vers -productVersion)" >> $GITHUB_ENV
        echo "ARCH=$(/usr/bin/uname -m)" >> $GITHUB_ENV
        echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
    - name: Check ccache
      uses: actions/cache@v3
      with:
        path: ${{ env.CCACHE_DIR }}
        key: mythtv-ccache-${{ env.VERSNUM }}-${{ matrix.os }}-${{ matrix.arch }}-${{ github.sha }}
        restore-keys: mythtv-ccache-${{ env.VERSNUM }}-${{ matrix.os }}-${{ matrix.arch }}-
    - name: "Setup deployment variables"
      run: |
        # setup destination folders
        BASE_PATH="/home/frs/project/m/my/mythtvformacosx"
        case $OS_VERS in
          10.15*)
            DEST_PATH="$BASE_PATH/v$VERSNUM/macOS\ 10.15\ Catalina"
          ;;
          11*)
            DEST_PATH="$BASE_PATH/v$VERSNUM/macOS\ 11\ Big\ Sur"
          ;;
          12*)
            DEST_PATH="$BASE_PATH/v$VERSNUM/macOS\ 12\ Monterey"
          ;;
          13*)
            DEST_PATH="$BASE_PATH/v$VERSNUM/macOS\ 13\ Ventura"
          ;;
          *)
            DEST_PATH="$BASE_PATH/test/"
          ;;
        esac

        # check is we're ARM based
        case $ARCH in
          arm*)
            DEST_PATH="$DEST_PATH/ARM64/"
          ;;
        esac
        echo "DEST_PATH=$DEST_PATH" >> $GITHUB_ENV
    - name: "Bootstrap MacPorts"
      run: |
        if hash port 2>/dev/null; then
          echo "Macport is already installed"
        else
          curl -LJO https://raw.githubusercontent.com/GiovanniBussi/macports-ci/master/macports-ci
          source ./macports-ci install
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)" --force
        fi
        sudo port selfupdate
        sudo port upgrade outdated
    - name: "Install required ports"
      run: |
        sudo port -N install rsync gsed ccache py${PYVERS}-ansible py${PYVERS}-virtualenv
        sudo port select --set python python${PYVERS}
        sudo port select --set python3 python${PYVERS}
        sudo port select --set ansible py${PYVERS}-ansible
        sudo port select --set virtualenv virtualenv${PYVERS}
        git clone https://github.com/MythTV/ansible.git
        cd ansible
        sudo ./mythtv.yml --extra-vars="database_version=${DBVERS} install_qtwebkit=true" --limit=localhost
        echo "Cleaning up macports builds"
        sudo rm -rf /opt/local/var/macports/build/*
        sudo rm -rf /opt/local/var/macports/distfiles/*
    - name: ccache statistics [pre]
      run: |
        ccache -sV
    - name: "Build MythTV with Plugins"
      run: |
        # First build with plugins
        export CCACHE_DIR=${{ env.CCACHE_DIR }}
        /bin/zsh ./compileMythfrontendAnsible.zsh $BLD_FLGS --build-plugins=true
        mkdir -p with_plugins
        ditto $GITHUB_WORKSPACE/mythtv-${VERSNUM}/mythtv/mythtv/programs/mythfrontend/mythfrontend.app with_plugins/mythfrontend.app
    - name: "Re-Build MythTV without Plugins"
      run: |
        # Now make it without plugins
        /bin/zsh ./compileMythfrontendAnsible.zsh $BLD_FLGS --build-plugins=false --skip-build=true
        mkdir -p without_plugins
        ditto $GITHUB_WORKSPACE/mythtv-${VERSNUM}/mythtv/mythtv/programs/mythfrontend/mythfrontend.app without_plugins/mythfrontend.app
        echo "Cleaning up workspace"
        rm -Rf $GITHUB_WORKSPACE/mythtv-${VERSNUM}/mythtv
    - name: "Sign App Bundles"
      # Extract the secrets we defined earlier as environment variables
      env:
        MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
        MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
        MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
      run: |
        # Turn our base64-encoded certificate back to a regular .p12 file
        echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12

        # We need to create a new keychain, otherwise using the certificate will prompt
        # with a UI dialog asking for the certificate password, which we can't
        # use in a headless CI environment
        if [ -f ~/Library/Keychains/build.keychain-db ]; then
          security delete-keychain build.keychain
        fi
        security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
        security import certificate.p12 -P "$MACOS_CERTIFICATE_PWD" -A -t cert -f pkcs12 -k build.keychain
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain

        echo "Code Sign App Bundles"
        for APP in "with_plugins/mythfrontend.app" "without_plugins/mythfrontend.app"
        do
          APP_FMWK_DIR=$APP/Contents/Frameworks
          APP_EXE_DIR=$APP/Contents/MacOS
          APP_PLUGINS_DIR=$APP/PlugIns/

          # Per the Apple developer notes on codesigning, you must codesign from the inside out
          # Search the Applocation for so
          find $APP -name '*.so' -print0 |
            while IFS= read -r -d '' line; do
              /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" -v --timestamp --options runtime --entitlements entitlement.plist --continue "$line"
            done
          # Search again for dylibs
          find $APP -name '*.dylib' -print0 |
            while IFS= read -r -d '' line; do
              /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" -v --timestamp --options runtime --entitlements entitlement.plist --continue "$line"
            done

          # Now sign the all frameworks and QT packages in the Frameworks directory
          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" -v --timestamp --options runtime --entitlements entitlement.plist --continue $APP_FMWK_DIR/Qt*
          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" -v --timestamp --options runtime --entitlements entitlement.plist --continue $APP_FMWK_DIR/*.framework

          # Next any files in the MacOS directory (binaries/scripts)
          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" -v --timestamp --options runtime --entitlements entitlement.plist --continue $APP_EXE_DIR/python
          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" -v --timestamp --options runtime --entitlements entitlement.plist --continue $APP_EXE_DIR/mythutil
          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" -v --timestamp --options runtime --entitlements entitlement.plist --continue $APP_EXE_DIR/mythpreviewgen
          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" -v --timestamp --options runtime --entitlements entitlement.plist --continue $APP_EXE_DIR/mythfrontend
          /usr/bin/codesign --force -s "$MACOS_CERTIFICATE_NAME" -v --timestamp --options runtime --entitlements entitlement.plist --continue $APP_EXE_DIR/mythfrontend.sh
          
          # finally sign the application
          codesign --force -s "$MACOS_CERTIFICATE_NAME" -v --timestamp --options runtime --entitlements entitlement.plist $APP
          # verify that the codesigning took
          echo "Verifying code signing"
          codesign --verify -vv --deep $APP

          # create file for submission
          /usr/bin/ditto -c -k --keepParent $APP $APP.zip
        done
    - name: "Notarize App Bundles"
      if: "!contains(matrix.os, '10.15')"
      env:
        MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
        PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
        PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
        PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
      run: |
        # setup notarization keychain
        echo "Create keychain profile"
        security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
        xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"

        echo "Notarize Applications"
        for APP in "with_plugins/mythfrontend.app" "without_plugins/mythfrontend.app"
        do
          xcrun notarytool submit "$APP.zip" --keychain-profile "notarytool-profile" --wait
          xcrun stapler staple "$APP"
          rm "$APP.zip"
        done
    - name: "Generate the DMGs"
      run: |
        echo "Generating DMG for Application with plugins"
        APP="with_plugins/mythfrontend.app"
        FULLVERS=$($APP/Contents/MacOS/mythfrontend --version|grep "MythTV Version"|gsed "s/^.*Version : *//")
        VOL_NAME_WITH=MythFrontend-$ARCH-$OS_VERS-$FULLVERS-with-plugins
        hdiutil create -volname "$VOL_NAME_WITH" -srcfolder "$APP" -ov -format UDRO "$VOL_NAME_WITH"
        echo "DMG_WITH=$VOL_NAME_WITH.dmg" >> $GITHUB_ENV

        echo "Generating DMG for Application without plugins"
        APP="without_plugins/mythfrontend.app"
        VOL_NAME_WITHOUT=MythFrontend-$ARCH-$OS_VERS-$FULLVERS
        hdiutil create -volname "$VOL_NAME_WITHOUT" -srcfolder "$APP" -ov -format UDRO "$VOL_NAME_WITHOUT"
        echo "DMG_WITHOUT=$VOL_NAME_WITHOUT.dmg" >> $GITHUB_ENV
    - name: "Sign and Notarize the DMGs"
      if: "!contains(matrix.os, '10.15')"
      env:
        MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
        MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
        MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
        MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
      run: |
        echo "Notarizing DMGS"
        # First with plugins
        echo "Codesigning $DMG_WITH"
        security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
        codesign --force --sign "$MACOS_CERTIFICATE_NAME" "$DMG_WITH"
        echo "Notarizing $DMG_WITH"
        xcrun notarytool submit "$DMG_WITH" --keychain-profile "notarytool-profile" --wait
        xcrun stapler staple "$DMG_WITH"

        # Next without plugins
        echo "Codesigning $DMG_WITHOUT"
        security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
        codesign --force --sign "$MACOS_CERTIFICATE_NAME" "$DMG_WITHOUT"
        echo "Notarizing $DMG_WITHOUT"
        xcrun notarytool submit "$DMG_WITHOUT" --keychain-profile "notarytool-profile" --wait
        xcrun stapler staple "$DMG_WITHOUT"
    - name: "Upload to SourceForge"
      run: |
        # send files via scp
        echo "Transmitting new dmg files"
        sh -c "scp -o StrictHostKeyChecking=no $DMG_WITH ${{ secrets.SF_LOGIN }}@frs.sourceforge.net:'$DEST_PATH'"
        sh -c "scp -o StrictHostKeyChecking=no $DMG_WITHOUT ${{ secrets.SF_LOGIN }}@frs.sourceforge.net:'$DEST_PATH'"
    - name: "Clean up keychain, certificate, and ssh keys"
      if: ${{ always() }}
      continue-on-error: true
      run: |
        # for ephemeral runners, this stup is unnecessary...
        security delete-keychain build.keychain
        rm -Rf ~/.ssh
        rm certificate.p12
    - name: ccache statistics [post]
      run: |
        ccache -sV
