# yamllint disable rule:line-length
---
name: "Compile MythTV"
inputs:
  CERT:
    require: true
    type: string
  CERT_PWD:
    require: true
    type: string
  CI_PWD:
    require: true
    type: string
  APPLE_ID:
    require: true
    type: string
  TEAM_ID:
    require: true
    type: string
  NOTAR_PWD:
    require: true
    type: string
  NOTAR_KEYCHAIN:
    require: true
    type: string
runs:
  using: "composite"
  steps:
    - name: "Setup Siging Certs"
      id: setup_certs
      shell: bash
      run: |
        # Store off the codesigning ID into a the default keychain-db
        # Setup siging certificates
        # Turn our base64-encoded certificate back to a regular .p12 file
        echo "${{ inputs.CERT }}" | base64 --decode > CERT.p12
        # We need to create a new keychain, otherwise using the certificate will
        # prompt with a UI dialog asking for the certificate password, which we
        # can't use in a headless CI environment
        if [ -f ~/Library/Keychains/build.keychain-db ]; then
          security delete-keychain build.keychain
        fi
        security create-keychain -p "${{ inputs.CI_PWD }}" build.keychain
        security default-keychain -s build.keychain
        security unlock-keychain -p "${{ inputs.CI_PWD }}" build.keychain
        security import CERT.p12 -P "${{ inputs.CERT_PWD }}" -A -t cert -f pkcs12 -k build.keychain
        security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "${{ inputs.CI_PWD }}" build.keychain
        security set-keychain-settings -t 14400
    - name: "Setup Notarization Credentials"
      id: notarize_creds
      shell: bash
      run: |
        # setup notraization keychain
        echo "Create keychain profile"
        security unlock-keychain -p "${{ inputs.CI_PWD }}" build.keychain
        xcrun notarytool store-credentials ${{ inputs.NOTAR_KEYCHAIN }} --apple-id "${{ inputs.APPLE_ID }}" --team-id "${{ inputs.TEAM_ID }}" --password "${{ inputs.NOTAR_PWD }}"
