---
name: "Install Packages vi Homebrew"
inputs:
  ARCH:
    required: true
    type: string
  CROSS_COMPILE:
    required: true
    type: boolean
  DBVERS:
    required: true
    type: string
  QTVERS:
    required: true
    type: string
runs:
  using: "composite"
  steps:
    - name: "Remove formula for a fresh homebrew install"
      id: nuke_brew
      shell: bash
      env:
        ARCH: ${{ inputs.ARCH }}
        CROSS_COMPILE: ${{ inputs.CROSS_COMPILE }}
      run: |
        echo "Removing all previously install formula"
        brew remove --cask --force $(brew list)
        brew remove --force $(brew list --formula)
        PKGMGR_PREFIX=$(brew --prefix)
        PKGMGR_CMD="$PKGMGR_PREFIX/bin/brew"
        echo "PKGMGR_PREFIX=$PKGMGR_PREFIX" >> $GITHUB_ENV
        echo "PKGMGR_CMD=$PKGMGR_CMD" >> $GITHUB_ENV
        echo "Updating homebrew"
        ${PKGMGR_CMD} update
        ANS_PB="${PKGMGR_PREFIX}/opt/ansible/bin/ansible-playbook"
        echo "ANS_PB=$ANS_PB" >> $GITHUB_ENV
    - name: "Setup Cross-Compile"
      id: crosscompile
      if: ${{ inputs.CROSS_COMPILE == 'true' }}
      shell: bash
      run: |
          CX_CMD="arch -${ARCH}"
          PKGMGR_PREFIX=$($CX_CMD brew --prefix)
          PKGMGR_CMD="$CX_CMD $PKGMGR_PREFIX/bin/brew"
          ANS_PB="a$CX_CMD ${PKGMGR_PREFIX}/opt/ansible/bin/ansible-playbook"
          echo "PKGMGR_PREFIX=$PKGMGR_PREFIX" >> $GITHUB_ENV
          echo "PKGMGR_CMD=$PKGMGR_CMD" >> $GITHUB_ENV
          echo "ANS_PB=$ANS_PB" >> $GITHUB_ENV
    - name: "Install required support packages"
      id: install_req_packages
      shell: bash
      env:
        PYVERS: ${{ inputs.PYVERS }}
        ANSIBLEVERS: ${{ inputs.ANSIBLEVERS }}
        DBVERS: ${{ inputs.DBVERS }}
        COMPILER: ${{ inputs.COMPILER }}
      run: |
        PKGMGR_BIN=$PKGMGR_PREFIX/bin
        echo "PKGMGR_BIN=$PKGMGR_BIN" >> $GITHUB_ENV
        export PATH=$PATH:$PKGMGR_BIN
        echo "Install requested python"
        ${PKGMGR_CMD} install --force --overwrite \
                              python3 python-setuptools python-packaging
        echo "Installing ansible and $DBVERS"
        ${PKGMGR_CMD} install --force --overwrite ansible $DBVERS pkg-config
    - name: "Install required packages via ansible"
      id: ansible_install
      shell: bash
      env:
        DBVERS: ${{ inputs.DBVERS }}
      run: |
        cd ansible
        echo "Installing packages via ansible playbook"
        XTRA_VARS="database_version=${DBVERS}"
        case $QTVERS in
          qt@6)
            XTRA_VARS="$XTRA_VARS qt6=true"
          ;;
        esac
        echo "Running ansible"
        ${ANS_PB} mythtv.yml --extra-vars="$XTRA_VARS" --limit=localhost
    - name: Fix the HDHomeRun library on ARM64
      shell: bash
      run: ln -s $PKGMGR_PREFIX/opt/libhdhomerun/lib/libhdhomerun.dylib $PKGMGR_PREFIX/opt/libhdhomerun/lib/libhdhomerun_arm64.dylib
      if: ${{ inputs.ARCH == 'arm64' }}
    - name: Fix the HDHomeRun library on x86_64
      shell: bash
      run: ln -s $PKGMGR_PREFIX/opt/libhdhomerun/lib/libhdhomerun.dylib $PKGMGR_PREFIX/opt/libhdhomerun/lib/libhdhomerun_x64.dylib
      if: ${{ inputs.ARCH == 'x86_64' }}
    - name: "Cleanup homebrew install"
      id: homebrew_cleanup
      shell: bash
      run: |
        echo "Cleaning up homebrew builds"
        # force ownership for the users ansible / mythtv temp directories
        sudo chown $(id -u):$(id -g) ~/.ansible
        sudo chown $(id -u):$(id -g) ~/.mythtv
