---
name: "Install Packages vi Homebrew"
inputs:
  ARCH:
    required: true
    type: string
  CROSS_COMPILE:
    required: true
    type: boolean
  DBVERS:
    required: true
    type: string
  QTVERS:
    required: true
    type: string
runs:
  using: "composite"
  steps:
    - name: "Remove formula for a fresh homebrew install"
      id: nuke_brew
      shell: bash
      run: |
        echo "Removing all previously install formula"
        brew remove --cask --force $(brew list)
        brew remove --force $(brew list --formula)
        # check if we're cross-compiling, setting up the brew command appropriately
        if $CROSS_COMPILE; then
          PKGMGR_PATH=$(arch -${ARCH} brew --prefix)
          PKGMGR_CMD="arch -${ARCH} $PKGMGR_PATH/bin/brew"
        else
          PKGMGR_PATH=$(brew --prefix)
          PKGMGR_CMD="$PKGMGR_PATH/bin/brew"
        fi
        echo "PKGMGR_PATH=$PKGMGR_PATH" >> $GITHUB_ENV
        echo "PKGMGR_CMD=$PKGMGR_CMD" >> $GITHUB_ENV
        echo "Updating homebrew"
        ${PKGMGR_CMD} update
    - name: "Install required support packages"
      id: install_req_packages
      shell: bash
      env:
        PYVERS: ${{ inputs.PYVERS }}
        PYDOTVERS: ${{ inputs.PYDOTVERS }}
        ANSIBLEVERS: ${{ inputs.ANSIBLEVERS }}
        DBVERS: ${{ inputs.DBVERS }}
        COMPILER: ${{ inputs.COMPILER }}
      run: |
        PKGMGR_BIN=$PKGMGR_PATH/bin
        echo "PKGMGR_BIN=$PKGMGR_BIN" >> $GITHUB_ENV
        export PATH=$PATH:$PKGMGR_BIN
        echo "Install requested python"
        ${PKGMGR_CMD} install --force --overwrite python3 python-setuptools python-packaging
        echo "Installing ansible and $DBVERS"
        ${PKGMGR_CMD} install --force --overwrite ansible $DBVERS pkg-config
        ANS_PB="ANSIBLE_BECOME=false ANSIBLE_BECOME_ASK_PASS=False ${PKGMGR_PATH}/opt/ansible/bin/ansible-playbook"
        if $CROSS_COMPILE; then
          ANS_PB="arch -${ARCH} $ANS_PB"
        fi
        echo "ANS_PB=$ANS_PB" >> $GITHUB_ENV
    - name: "Install required packages via ansible"
      id: ansible_install
      shell: bash
      env:
        PYDOTVERS: ${{ inputs.PYDOTVERS }}
        DBVERS: ${{ inputs.DBVERS }}
      run: |
        cd ansible
        echo "Installing packages via ansible playbook"
        export PKG_CONFIG_PATH=$PKG_CONFIG_PATH:$PKGMGR_PATH/opt/mysql-client/lib/pkgconfig/
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
        export MYSQLCLIENT_LDFLAGS="$(${PKGMGR_PREFIX}/bin/pkg-config --libs mysqlclient)"
        echo "MYSQLCLIENT_LDFLAGS=$MYSQLCLIENT_LDFLAGS" >> $GITHUB_ENV
        export MYSQLCLIENT_CFLAGS="$(${PKGMGR_PREFIX}/bin/pkg-config --cflags mysqlclient)"
        echo "MYSQLCLIENT_CFLAGS=$MYSQLCLIENT_CFLAGS" >> $GITHUB_ENV
        XTRA_VARS="database_version=${DBVERS}"
        echo "Running ansible"
        export C_INCLUDE_PATH=$C_INCLUDE_PATH:$PKGMGR_PATH/include
        export CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:$PKGMGR_PATH/include
        export LIBRARY_PATH=$LIBRARY_PATH:$PKGMGR_PATH/lib
        ${ANS_PB} mythtv.yml --extra-vars="$XTRA_VARS" --limit=localhost
    - name: "Cleanup homebrew install"
      id: homebrew_cleanup
      shell: bash
      run: |
        echo "Cleaning up homebrew builds"
        # force ownership for the users ansible / mythtv temp directories
        sudo chown $(id -u):$(id -g) ~/.ansible
        sudo chown $(id -u):$(id -g) ~/.mythtv
