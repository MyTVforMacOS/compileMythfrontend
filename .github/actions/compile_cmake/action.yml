---
name: "Compile MythTV"
inputs:
  APP_OUT_DIR:
    required: true
    type: string
  OS:
    require: true
    type: string
  ARCH:
    require: true
    type: string
  CROSS_COMPILE:
    required: true
    type: boolean
  VERSNUM:
    require: true
    type: string
  BLD_FLGS:
    required: true
    type: string
  USE_CCACHE:
    required: false
    type: boolean
    default: false
  CI_PWD:
    require: true
    type: string
runs:
  using: "composite"
  steps:
    - name: "Setup Build Environment Variable"
      id: setup_env
      shell: bash
      env:
        APP_OUT_DIR: ${{ inputs.APP_OUT_DIR }}
        DMG_FILE: cpack_output/mythfrontend.dmg
      run: |
        mkdir -p $APP_OUT_DIR
        echo "CCACHE_DIR=$HOME/.ccache" >> $GITHUB_ENV
        echo "DMG_FILE=$DMG_FILE" >> $GITHUB_ENV
        # check if we're cross-compiling setting proper build commands
        if [ ! ${{ inputs.CROSS_COMPILE }} ]; then
          ZSH_CMD="/bin/zsh"
        else
          ZSH_CMD="arch -${ARCH} /bin/zsh"
        fi
        echo "ZSH_CMD=$ZSH_CMD" >> $GITHUB_ENV
    - name: Check ccache
      id: setup_ccache
      if: ${{ inputs.USE_CCACHE == 'true' }}
      uses: actions/cache@master
      env:
        CCACHE_STORE: ${{ inputs.VERSNUM }}-${{ inputs.OS }}-${{ inputs.ARCH }}
      with:
        path: ${{ env.CCACHE_DIR }}
        key: mythtv-ccache-${{ env.CCACHE_STORE }}-${{ github.sha }}
        restore-keys: ${{ env.CCACHE_STORE}}-
    - name: "Build MythTV with Plugins"
      id: build_with
      shell: bash
      env:
        APP_OUT_DIR: ${{ inputs.APP_OUT_DIR }}
        BLD_FLGS: ${{ inputs.BLD_FLGS }}
        CI_PWD: ${{ inputs.CI_PWD }}
      run: |
        # First build with plugins
        export CCACHE_DIR=${{ env.CCACHE_DIR }}
        export CODESIGN_ID=${{ env.CODESIGN_ID }}
        /usr/bin/security unlock-keychain
        export CODESIGN_ID=$(security find-generic-password -a "${USER}" -s CODESIGN_ID -w)
        security unlock-keychain -p "${{ env.CI_PWD }}" build.keychain
        ${ZSH_CMD} ./compileMythtvAnsible_cmake.zsh ${{ env.BLD_FLGS }} --build-plugins=true
        echo "compile complete, copying into $APP_OUT_DIR"
        mv ${DMG_FILE} "${APP_OUT_DIR}/mythfrontend_with.dmg"
    - name: "Re-Build MythTV without Plugins"
      id: build_wo
      shell: bash
      env:
        APP_OUT_DIR: ${{ inputs.APP_OUT_DIR }}
        BLD_FLGS: ${{ inputs.BLD_FLGS }}
        CI_PWD: ${{ inputs.CI_PWD }}
      run: |
        # clean up work from w_plugins build
        rm -Rf cpack_output
        # Now make it without plugins
        /usr/bin/security unlock-keychain
        export CODESIGN_ID=$(security find-generic-password -a "${USER}" -s CODESIGN_ID -w)
        security unlock-keychain -p "${{ env.CI_PWD }}" build.keychain
        ${ZSH_CMD} ./compileMythtvAnsible_cmake.zsh ${{ env.BLD_FLGS }} --signing-id="$CODESIGN_ID" --skip-build=true --build-plugins=false
        echo "compile complete, copying into $APP_OUT_DIR"
        mv ${DMG_FILE} "${APP_OUT_DIR}/mythfrontend_wo.dmg"
    - uses: actions/cache/save@master
      id: ccache_save
      if: ${{ steps.build_with.outcome == 'success' && inputs.USE_CCACHE == 'true' }}
      env:
        CCACHE_STORE: ${{ inputs.VERSNUM }}-${{ inputs.OS }}-${{ inputs.ARCH }}
      with:
        path: ${{ env.CCACHE_DIR }}
        key: mythtv-ccache-${{ env.CCACHE_STORE }}-${{ github.sha }}
